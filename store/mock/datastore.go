// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-topic-api/models"
	"github.com/ONSdigital/dp-topic-api/store"
	"sync"
	"time"
)

// Ensure, that StorerMock does implement store.Storer.
// If this is not the case, regenerate this file with moq.
var _ store.Storer = &StorerMock{}

// StorerMock is a mock implementation of store.Storer.
//
//	func TestSomethingThatUsesStorer(t *testing.T) {
//
//		// make and configure a mocked store.Storer
//		mockedStorer := &StorerMock{
//			CheckTopicExistsFunc: func(ctx context.Context, id string) error {
//				panic("mock out the CheckTopicExists method")
//			},
//			GetContentFunc: func(ctx context.Context, id string, queryTypeFlags int) (*models.ContentResponse, error) {
//				panic("mock out the GetContent method")
//			},
//			GetTopicFunc: func(ctx context.Context, id string) (*models.TopicResponse, error) {
//				panic("mock out the GetTopic method")
//			},
//			UpdateReleaseDateFunc: func(ctx context.Context, id string, releaseDate time.Time) error {
//				panic("mock out the UpdateReleaseDate method")
//			},
//			UpdateStateFunc: func(ctx context.Context, id string, state string) error {
//				panic("mock out the UpdateState method")
//			},
//			UpdateTopicFunc: func(ctx context.Context, id string, topic *models.TopicResponse) error {
//				panic("mock out the UpdateTopic method")
//			},
//			UpdateTopicDataFunc: func(ctx context.Context, id string, topic *models.TopicUpdate) error {
//				panic("mock out the UpdateTopicData method")
//			},
//		}
//
//		// use mockedStorer in code that requires store.Storer
//		// and then make assertions.
//
//	}
type StorerMock struct {
	// CheckTopicExistsFunc mocks the CheckTopicExists method.
	CheckTopicExistsFunc func(ctx context.Context, id string) error

	// GetContentFunc mocks the GetContent method.
	GetContentFunc func(ctx context.Context, id string, queryTypeFlags int) (*models.ContentResponse, error)

	// GetTopicFunc mocks the GetTopic method.
	GetTopicFunc func(ctx context.Context, id string) (*models.TopicResponse, error)

	// UpdateReleaseDateFunc mocks the UpdateReleaseDate method.
	UpdateReleaseDateFunc func(ctx context.Context, id string, releaseDate time.Time) error

	// UpdateStateFunc mocks the UpdateState method.
	UpdateStateFunc func(ctx context.Context, id string, state string) error

	// UpdateTopicFunc mocks the UpdateTopic method.
	UpdateTopicFunc func(ctx context.Context, id string, topic *models.TopicResponse) error

	// UpdateTopicDataFunc mocks the UpdateTopicData method.
	UpdateTopicDataFunc func(ctx context.Context, id string, topic *models.TopicUpdate) error

	// calls tracks calls to the methods.
	calls struct {
		// CheckTopicExists holds details about calls to the CheckTopicExists method.
		CheckTopicExists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetContent holds details about calls to the GetContent method.
		GetContent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// QueryTypeFlags is the queryTypeFlags argument value.
			QueryTypeFlags int
		}
		// GetTopic holds details about calls to the GetTopic method.
		GetTopic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// UpdateReleaseDate holds details about calls to the UpdateReleaseDate method.
		UpdateReleaseDate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// ReleaseDate is the releaseDate argument value.
			ReleaseDate time.Time
		}
		// UpdateState holds details about calls to the UpdateState method.
		UpdateState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// State is the state argument value.
			State string
		}
		// UpdateTopic holds details about calls to the UpdateTopic method.
		UpdateTopic []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Topic is the topic argument value.
			Topic *models.TopicResponse
		}
		// UpdateTopicData holds details about calls to the UpdateTopicData method.
		UpdateTopicData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Topic is the topic argument value.
			Topic *models.TopicUpdate
		}
	}
	lockCheckTopicExists  sync.RWMutex
	lockGetContent        sync.RWMutex
	lockGetTopic          sync.RWMutex
	lockUpdateReleaseDate sync.RWMutex
	lockUpdateState       sync.RWMutex
	lockUpdateTopic       sync.RWMutex
	lockUpdateTopicData   sync.RWMutex
}

// CheckTopicExists calls CheckTopicExistsFunc.
func (mock *StorerMock) CheckTopicExists(ctx context.Context, id string) error {
	if mock.CheckTopicExistsFunc == nil {
		panic("StorerMock.CheckTopicExistsFunc: method is nil but Storer.CheckTopicExists was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockCheckTopicExists.Lock()
	mock.calls.CheckTopicExists = append(mock.calls.CheckTopicExists, callInfo)
	mock.lockCheckTopicExists.Unlock()
	return mock.CheckTopicExistsFunc(ctx, id)
}

// CheckTopicExistsCalls gets all the calls that were made to CheckTopicExists.
// Check the length with:
//
//	len(mockedStorer.CheckTopicExistsCalls())
func (mock *StorerMock) CheckTopicExistsCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockCheckTopicExists.RLock()
	calls = mock.calls.CheckTopicExists
	mock.lockCheckTopicExists.RUnlock()
	return calls
}

// GetContent calls GetContentFunc.
func (mock *StorerMock) GetContent(ctx context.Context, id string, queryTypeFlags int) (*models.ContentResponse, error) {
	if mock.GetContentFunc == nil {
		panic("StorerMock.GetContentFunc: method is nil but Storer.GetContent was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		ID             string
		QueryTypeFlags int
	}{
		Ctx:            ctx,
		ID:             id,
		QueryTypeFlags: queryTypeFlags,
	}
	mock.lockGetContent.Lock()
	mock.calls.GetContent = append(mock.calls.GetContent, callInfo)
	mock.lockGetContent.Unlock()
	return mock.GetContentFunc(ctx, id, queryTypeFlags)
}

// GetContentCalls gets all the calls that were made to GetContent.
// Check the length with:
//
//	len(mockedStorer.GetContentCalls())
func (mock *StorerMock) GetContentCalls() []struct {
	Ctx            context.Context
	ID             string
	QueryTypeFlags int
} {
	var calls []struct {
		Ctx            context.Context
		ID             string
		QueryTypeFlags int
	}
	mock.lockGetContent.RLock()
	calls = mock.calls.GetContent
	mock.lockGetContent.RUnlock()
	return calls
}

// GetTopic calls GetTopicFunc.
func (mock *StorerMock) GetTopic(ctx context.Context, id string) (*models.TopicResponse, error) {
	if mock.GetTopicFunc == nil {
		panic("StorerMock.GetTopicFunc: method is nil but Storer.GetTopic was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetTopic.Lock()
	mock.calls.GetTopic = append(mock.calls.GetTopic, callInfo)
	mock.lockGetTopic.Unlock()
	return mock.GetTopicFunc(ctx, id)
}

// GetTopicCalls gets all the calls that were made to GetTopic.
// Check the length with:
//
//	len(mockedStorer.GetTopicCalls())
func (mock *StorerMock) GetTopicCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetTopic.RLock()
	calls = mock.calls.GetTopic
	mock.lockGetTopic.RUnlock()
	return calls
}

// UpdateReleaseDate calls UpdateReleaseDateFunc.
func (mock *StorerMock) UpdateReleaseDate(ctx context.Context, id string, releaseDate time.Time) error {
	if mock.UpdateReleaseDateFunc == nil {
		panic("StorerMock.UpdateReleaseDateFunc: method is nil but Storer.UpdateReleaseDate was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          string
		ReleaseDate time.Time
	}{
		Ctx:         ctx,
		ID:          id,
		ReleaseDate: releaseDate,
	}
	mock.lockUpdateReleaseDate.Lock()
	mock.calls.UpdateReleaseDate = append(mock.calls.UpdateReleaseDate, callInfo)
	mock.lockUpdateReleaseDate.Unlock()
	return mock.UpdateReleaseDateFunc(ctx, id, releaseDate)
}

// UpdateReleaseDateCalls gets all the calls that were made to UpdateReleaseDate.
// Check the length with:
//
//	len(mockedStorer.UpdateReleaseDateCalls())
func (mock *StorerMock) UpdateReleaseDateCalls() []struct {
	Ctx         context.Context
	ID          string
	ReleaseDate time.Time
} {
	var calls []struct {
		Ctx         context.Context
		ID          string
		ReleaseDate time.Time
	}
	mock.lockUpdateReleaseDate.RLock()
	calls = mock.calls.UpdateReleaseDate
	mock.lockUpdateReleaseDate.RUnlock()
	return calls
}

// UpdateState calls UpdateStateFunc.
func (mock *StorerMock) UpdateState(ctx context.Context, id string, state string) error {
	if mock.UpdateStateFunc == nil {
		panic("StorerMock.UpdateStateFunc: method is nil but Storer.UpdateState was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		State string
	}{
		Ctx:   ctx,
		ID:    id,
		State: state,
	}
	mock.lockUpdateState.Lock()
	mock.calls.UpdateState = append(mock.calls.UpdateState, callInfo)
	mock.lockUpdateState.Unlock()
	return mock.UpdateStateFunc(ctx, id, state)
}

// UpdateStateCalls gets all the calls that were made to UpdateState.
// Check the length with:
//
//	len(mockedStorer.UpdateStateCalls())
func (mock *StorerMock) UpdateStateCalls() []struct {
	Ctx   context.Context
	ID    string
	State string
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		State string
	}
	mock.lockUpdateState.RLock()
	calls = mock.calls.UpdateState
	mock.lockUpdateState.RUnlock()
	return calls
}

// UpdateTopic calls UpdateTopicFunc.
func (mock *StorerMock) UpdateTopic(ctx context.Context, id string, topic *models.TopicResponse) error {
	if mock.UpdateTopicFunc == nil {
		panic("StorerMock.UpdateTopicFunc: method is nil but Storer.UpdateTopic was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		Topic *models.TopicResponse
	}{
		Ctx:   ctx,
		ID:    id,
		Topic: topic,
	}
	mock.lockUpdateTopic.Lock()
	mock.calls.UpdateTopic = append(mock.calls.UpdateTopic, callInfo)
	mock.lockUpdateTopic.Unlock()
	return mock.UpdateTopicFunc(ctx, id, topic)
}

// UpdateTopicCalls gets all the calls that were made to UpdateTopic.
// Check the length with:
//
//	len(mockedStorer.UpdateTopicCalls())
func (mock *StorerMock) UpdateTopicCalls() []struct {
	Ctx   context.Context
	ID    string
	Topic *models.TopicResponse
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		Topic *models.TopicResponse
	}
	mock.lockUpdateTopic.RLock()
	calls = mock.calls.UpdateTopic
	mock.lockUpdateTopic.RUnlock()
	return calls
}

// UpdateTopicData calls UpdateTopicDataFunc.
func (mock *StorerMock) UpdateTopicData(ctx context.Context, id string, topic *models.TopicUpdate) error {
	if mock.UpdateTopicDataFunc == nil {
		panic("StorerMock.UpdateTopicDataFunc: method is nil but Storer.UpdateTopicData was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    string
		Topic *models.TopicUpdate
	}{
		Ctx:   ctx,
		ID:    id,
		Topic: topic,
	}
	mock.lockUpdateTopicData.Lock()
	mock.calls.UpdateTopicData = append(mock.calls.UpdateTopicData, callInfo)
	mock.lockUpdateTopicData.Unlock()
	return mock.UpdateTopicDataFunc(ctx, id, topic)
}

// UpdateTopicDataCalls gets all the calls that were made to UpdateTopicData.
// Check the length with:
//
//	len(mockedStorer.UpdateTopicDataCalls())
func (mock *StorerMock) UpdateTopicDataCalls() []struct {
	Ctx   context.Context
	ID    string
	Topic *models.TopicUpdate
} {
	var calls []struct {
		Ctx   context.Context
		ID    string
		Topic *models.TopicUpdate
	}
	mock.lockUpdateTopicData.RLock()
	calls = mock.calls.UpdateTopicData
	mock.lockUpdateTopicData.RUnlock()
	return calls
}
